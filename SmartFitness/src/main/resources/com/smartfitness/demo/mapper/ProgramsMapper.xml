<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smartfitness.demo.mapper.ProgramsMapper">

	<insert id="addPg" parameterType="com.smartfitness.demo.model.Programs">
		insert into sf_programs values(null,#{pg_name},#{pg_info},#{pg_img1},#{pg_img2})
	</insert>
	
	<!-- 결제 -->
	<insert id="enroll">
		insert into membership_list values(null,#{mem_id},#{pg_seq},#{cnt},now(),#{payment})
	</insert>
	
	<!-- 수업 시간표 -->
	<select id="selectCurrPg"   resultType="java.util.HashMap">
		select cp.curr_pg_seq as class_num, sp.pg_name as pg_name,DATE_FORMAT(cp.curr_pg_s_dt,'%y%m%d') as start_date
		,DATE_FORMAT(cp.curr_pg_s_dt,'%H%i%s') as start_time,dayofweek(cp.curr_pg_s_dt) as weekday,cp.pg_status
		from current_programs cp join sf_programs sp
		ON cp.pg_seq = sp.pg_seq
		AND month(curr_pg_s_dt)=#{month}
		order by DATE_FORMAT(cp.curr_pg_s_dt,'%y%m%d')
	</select>
	
	<select id="sendMy" resultType="java.util.HashMap">
		select reserv_pg_seq
		from reserv_programs
		where mem_id=#{mem_id}
	</select>
	
	
	
	<!-- 프로그램 정보 보내주기(프로그램 번호가 들어왔을 때) current_programs, rating_trainer, sf_trainer -->
	<select id="sendC" resultType="java.util.HashMap">
		select st.trainer_name,DATE_FORMAT(cp.curr_pg_s_dt,'%y%m%d %H%i%s') as start,DATE_FORMAT(cp.curr_pg_d_dt,'%y%m%d %H%i%s') as end,cp.pg_max_peo as 정원 , cp.pg_status as 현재인원
		from current_programs cp 
		join sf_trainer st
		on cp.trainer_seq=st.trainer_seq
		and cp.curr_pg_seq = #{curr_pg_seq}
	</select>
	
	
	<!-- 회원의 예약내역 가져오기 들어온 멤버아이디 행의 curr_pg_seq가 참조하는 current_programs
	내가 트레이너 번호를 넘겨주면 프론트가 그 번호에 맞는 트레이너 이름을 어떻게 아는거지?-->
	<select id="reservMy" resultType="java.util.HashMap">
		select cp.pg_seq, DATE_FORMAT(cp.curr_pg_s_dt,'%y%m%d %H%i%s') as start, DATE_FORMAT(cp.curr_pg_d_dt,'%y%m%d %H%i%s') as end
		from reserv_programs rp join current_programs cp
		on rp.curr_pg_seq = cp.curr_pg_seq
		and rp.mem_id=#{mem_id}
	</select>
	
	<select id="reservMy2" resultType="String">
		select pg_name
		from sf_programs
		where pg_seq=#{pg_seq}
	</select>
	
	<!--  
	<select id="reservMy">
		select pg_seq, trainer_seq, curr_pg_s_dt, curr_pg_d_dt
		from current_programs cp join  
		where cp.curr_pg_seq = 
		(select curr_pg_seq
		 from sf_members
		 where mem_id=#{mem_id}
		)
	</select>
	-->
	
	<!-- 수업 오픈하기 -->
	<insert id="openPg" >
		insert into current_programs values(null,#{pg_seq},#{trainer_seq},#{curr_pg_s_dt},#{curr_pg_d_dt},#{pg_max_peo},#{curr_num_peo},#{pg_status})
	</insert>
	

	<!-- 프로그램 예약할때 해당 프로그램이 존재하는지 확인 -->
	<select id="read" resultType="java.util.HashMap">
		select curr_pg_seq
		from current_programs
		where curr_pg_seq=#{num}
	</select>
	
	<select id="read2" resultType="int">
		select pg_status
		from current_programs
		where curr_pg_seq=#{num2}
	</select>
	
	
	<!-- 프로그램 예약하기 -->
	<insert id="reservPg">
		insert into reserv_programs values(null,#{mem_id},#{curr_pg_seq})
	</insert>
	
	<!-- 예약을 했으니 현재 프로그램 테이블에 인원 + -->
	<update id="reservPg2">
		update current_programs
		set curr_num_peo = curr_num_peo +1
		where curr_pg_seq=#{curr_pg_seq}
	</update>
	
	<!-- 정원초과여부 확인해서 상태창 업데이트 하기 -->
	<update id="reservPg3">
		update current_programs
		set pg_status=0
		where curr_num_peo>= pg_max_peo
	</update>
	
	<!-- 예약 취소하기 -->
	<delete id="cancelPg">
		delete
		from reserv_programs
		where curr_pg_seq = #{num}
		and mem_id=#{mem_id}
	</delete>
	
	<!-- 취소를 했으니 현재 프로그램 테이블에 인원 -, 예약 가능 상태로 변경 -->
	<update id="cancelPg2">
		update current_programs
		set curr_num_peo= curr_num_peo-1,pg_status=1
		where curr_pg_seq=#{num}
	</update>
	

	
	<select id="confirmT" resultType="java.util.HashMap">
		select t.trainer_seq , t.trainer_name, trainer_price, trainer_info, trainer_pic, trainer_ment, avg(r.rating)
		from sf_trainer t join rating_trainer r
		ON t.trainer_seq=r.trainer_seq
		AND t.trainer_seq=#{num}
	</select>
	
	<select id="confirmAllT" resultType="java.util.HashMap">
		select *
		from sf_trainer
	</select>
	
	<!-- 
	select t.trainer_seq, t.trainer_name, trainer_price, trainer_info, trainer_pic, trainer_ment, avg(r.rating) AS rate
		from sf_trainer t join rating_trainer r
		ON t.trainer_seq=r.trainer_seq and pg_seq=#{num}
		GROUP BY t.trainer_seq
		ORDER BY AVG(r.rating) desc
	 -->
	
	<!-- 트레이너 추가 -->
	<insert id="addTrainer">
		insert into sf_trainer values(null,#{trainer_name},#{trainer_price},#{trainer_info},#{trainer_pic},#{trainer_ment},#{pg_seq},#{ctr_seq})
	</insert>
	
	<!-- 트레이너 평점 주기 -->
	<insert id = "rate">
		insert into rating_trainer values(null,#{trainer_seq},#{rating},now(),#{mem_id})
	</insert>
	
	<!-- PT 예약 -->
	<insert id="reservPt">
		insert into reserv_pt values(null,#{mem_id},#{start},#{end},null)
	</insert>
	
	
	<!-- PT 시간표(예약되어있는 내역들 확인 -->
	<select id="selectCurrPt"  resultType="java.util.HashMap">
		select start, end, trainer
		from reserv_pt
		where month(start)=#{month}
	</select>
</mapper>